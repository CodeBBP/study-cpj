<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1476093429543">{:repl-history {:ide [], :local [&quot;(use 'ftpfile.ftp-file)&quot; &quot;(use 'study_cpj.readconf)&quot; &quot;(config-map )&quot; &quot;(require '[clj-time.format :as f])&quot; &quot;(use 'tools.commons-tools)&quot; &quot;(get-syscurrtime )&quot; &quot;(let [{a :exportDir  b :suffix  c :content} file] a)&quot; &quot;(let [{a :exportDir  b :suffix  {c :defaultContent _ d :columnSeparator}:content} file] d)&quot; &quot;(let [{a :exportDir  b :suffix  {c :defaultContent _ d :columnSeparator} :content} file] d)&quot; &quot;(let [{a :exportDir  b :suffix  {c :defaultContent d :columnSeparator} :content} file] d)&quot; &quot;(let [[keys {exportDir  suffix  {defaultContent columnSeparator} content}] file] columnSeparator)&quot; &quot;(def v [1 2 3])&quot; &quot;(into v [1 2 3 4])&quot; &quot;(def myls (apply list (range 10)))&quot; &quot;myls&quot; &quot;(take-nth 2 myls)&quot; &quot;(take-nth 2 (drop 1 myls) )&quot; &quot;(drop 1 myls)&quot; &quot;(interleave (take-nth 2 (drop 1 myls)) (take-nth 2 myls))&quot; &quot;(interleave (take-nth 2 myls) (take-nth 2 (drop 1 myls)))&quot; &quot;(into )&quot; &quot;(into (empty myls) (interleave (take-nth 2 myls) (take-nth 2 (drop 1 myls))))&quot; &quot;(empty myls)&quot; &quot;(def mympp '({:a 1 :b 2} {:a 3 :b 4}))&quot; &quot;(def mympp [{:a 1 :b 2} {:a 3 :b 4}])&quot; &quot;(empty mympp)&quot; &quot;(into (empty myls) (take-nth 2 (drop 1 myls)) (interleave (take-nth 2 myls)))&quot; &quot;(interleave '(1 2 3) '(4 5 6))&quot; &quot;(inc [1 2 3])&quot; &quot;(map inc [1 2 3])&quot; &quot;(for [[k v] mympp] [k [(fn [x] (+ 1 x)) v]])&quot; &quot;(for [[k v] mympp] [k [(inc ) v]])&quot; &quot;(for [[k v] mympp]\n      [k [(inc ) v]]\n  )&quot; &quot;(use 'stydy-cpj.clojure-study)&quot; &quot;(defn map-map [f m]\n  (into (empty m)\n        (for [[k v] m] [k [f v]])\n        )\n  )&quot; &quot;(use 'study-cpj.clojure-study)&quot; &quot;(use 'stydy_cpj.clojure-study)&quot; &quot;(use 'ftpfile.ftp-file-v2)&quot; &quot;(do-all sqls file-name)&quot; &quot;(do-item file (do-query ))&quot; &quot;(do-item file (do-query \&quot;select *from student\&quot;))&quot; &quot;(do-query \&quot;select *from student\&quot;)&quot; &quot;(sqlConPlus )&quot; &quot;(sqlConPlus)&quot; &quot;(use 'ftpfile.ftp-file-v1)&quot;], :remote []}}</component>
</project>