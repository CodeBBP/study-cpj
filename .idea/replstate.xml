<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1477549952965">{:repl-history {:ide [], :local [&quot;(inc [1 2 3 4])&quot; &quot;vector [[:a :b :c]\n        [:d :e :f]\n        [:g :h :i]]&quot; &quot;(pmap inc [1 2 3 4 5])&quot; &quot;(map-indexed (fn [idx itm] [idx itm]) \&quot;foobar\&quot;)&quot; &quot;(map-indexed vector \&quot;foobar\&quot;)  &quot; &quot;(map vector \&quot;foobar\&quot;)  &quot; &quot;(seque '(1 2 3 4))&quot; &quot;(second [])  &quot; &quot;(last {:a 1 :b 2})&quot; &quot;(last {:a 1 :b 2 :c 3 :d 4 :e 5})&quot; &quot;(last {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6})&quot; &quot;(last {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7})&quot; &quot;(last {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8})&quot; &quot;(last {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :v 4})&quot; &quot;(last {:a 1 :b 2 :v 4})&quot; &quot;(last {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i 9})&quot; &quot;(first {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i 9})&quot; &quot;(last (range 1000))&quot; &quot;(last {:one 1 :two 2 :three 3 :a 4 :b 5})&quot; &quot;(last {:one 1 :two 2 :three 3 :a 4 :b 5 :c 6})&quot; &quot;(last {:one 1 :two 2 :three 3 :a 4 :b 5 :c 6 :d 7})&quot; &quot;(last {:one 1 :two 2 :three 3 :a 4 :b 5 :c 6 :d  7 :e 8})&quot; &quot;(last {:one 1 :two 2 :three 3 :a 4 :b 5 :c 6 :d  7 :e 8 :f 9})&quot; &quot;(last :a1 1 :a2 2 :a3 3 :a4 4 :a5 5 :a6 6 :a7 7 :a8 8 :a9 9)&quot; &quot;(last {:a1 1 :a2 2 :a3 3 :a4 4 :a5 5 :a6 6 :a7 7 :a8 8 :a9 9})&quot; &quot;(last {:a1123 1 :a2 2 :a3 3 :a4 4 :a5 5 :a6 6 :a7 7 :a8 8 :a9 9})&quot; &quot;(last {:a1 1 :b2 2 :c3 3 :d4 4 :e5 5 :f6 6 :g7 7 :h8 8 :a9 9})&quot; &quot;(last {:a1 1 :b2 2 :c3 3 :d4 4 :e5 5 :f6 6 :g7 7 :h8 8 :i9 9})&quot; &quot;(fnext ['(a b c) '(b a c)])&quot; &quot;(next ['(a b c) '(b a c)])&quot; &quot;(nth (next (range 10)))&quot; &quot;(nth (next (range 10)) 3)&quot; &quot;(nthnext (range 10) 3)&quot; &quot;(nthnext (range 10) 0)&quot; &quot;(nthnext (range 10) 1)&quot; &quot;(nthnext (range 10) 2)&quot; &quot;(nthnext (range 10) 11)&quot; &quot;(drop 11 (range 10))&quot; &quot;(last (sorted-map {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i 9}))&quot; &quot;(sorted-map {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i 9})&quot; &quot;(last (sorted-map :a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i 9)) &quot; &quot;(doc when-first)&quot; &quot;(when-first [1 2 3 3 4]) &quot; &quot;(when-first [1 2 3 3 4] 1) &quot; &quot;(when (seq [1 2 3 4]) (let [x (first [1 2 3 4])] body))&quot; &quot;(when-first [a '(1 2 3 4)] a)&quot; &quot;(when-first [a '(1 2 3 4) b '(2 3 4 5)] [a b])&quot; &quot;(when-first [a '(1 2 3 4) b '(2 3 4 5)] b)&quot; &quot;(seq [1 2 3 4])&quot; &quot;((when (seq [1 2 3 4])) \&quot;true\&quot; \&quot;false\&quot;)&quot; &quot;((when ([1 2 3])) \&quot;true\&quot; \&quot;false\&quot;)&quot; &quot;(max-key #(+ % 1) 1 2 3 4 5)&quot; &quot;(max-key 1 2 3 4 5)&quot; &quot;(max-key str 1 2 3 4 5)&quot; &quot;(key (apply max-key val {:a 3 :b 7 :c 9 :d 9}))&quot; &quot;(max-key #(+ % 1) 1 2 3  8 4 5)&quot; &quot;(seq [])&quot; &quot;(when-first [a []] :x)&quot; &quot;(when-first [a []] a)&quot; &quot;(min-key count \&quot;asd\&quot; \&quot;bsd\&quot; \&quot;dsd\&quot; \&quot;long word\&quot;)&quot; &quot;(zipmap [:a :b :c] (range 10))&quot; &quot;(reduce conj [-1 -2] (-&gt;&gt; (range 10) (map #(+ 2 %)) (filter odd?)))&quot; &quot;(reduce list [])&quot; &quot;(reduce #(+ % 1) [])&quot; &quot;(reduce #(+ % 1) [1])&quot; &quot;(reduce #(+ % 1) [2])&quot; &quot;(reduce #(+ % %2 1) 1 1 [2 3])&quot; &quot;(reduce #(+ % %2 1)  [2 3])&quot; &quot;(reduce #(+ % %2 1) 1 [2 3])&quot; &quot;(reduce #(+ % %2 1) 1 3 [2 3])&quot; &quot;(reduce #(+ % %2 1) [1 2] [2 3])&quot; &quot;(reduce #(apply + %) [1 2] [[2 3]])&quot; &quot;(reduce #(map + %) [[2 3]])&quot; &quot;(reduce #(map + %) [[2 3] [2 3]])&quot; &quot;(reduce #(map + % %) [[2 3] [2 3]])&quot; &quot;(reduce #(+ % %) [[2 3] [2 3]])&quot; &quot;(reduce #(+ (first %) (first %2)) [[2 3] [2 3]])&quot; &quot;(reduce str [])&quot; &quot;(reductions + 3 [1 2 3])&quot; &quot;(# '(1 1 2 3 2 4 5 5))&quot; &quot;(into # '(1 1 2 3 2 4 5 5))&quot; &quot;(into #  '(1 1 2 3 2 4 5 5))&quot; &quot;(into #{} '(1 1 2 3 2 4 5 5))&quot; &quot;( #{} '(1 1 2 3 2 4 5 5))&quot; &quot;(set nil)&quot; &quot;(into-array [1 2 3])&quot; &quot;(into-array Object [1 2 3 \&quot;4\&quot;])&quot; &quot;(into-array Object [1 2 3 \&quot;4\&quot; \&quot;a\&quot;])&quot; &quot;(def arrayy (into-array Object [1 2 3 \&quot;4\&quot; \&quot;a\&quot;]))&quot; &quot;arrayy 1&quot; &quot;arrayy [1]&quot; &quot;(arrayy 1)&quot; &quot;(get arrayy 1)&quot; &quot;(last arrayy)&quot; &quot;(into-array [\&quot;a\&quot; \&quot;b\&quot; \&quot;1\&quot; 2])&quot; &quot;(into-array [\&quot;a\&quot; \&quot;b\&quot; \&quot;1\&quot;])&quot; &quot;(into-array Byte/TYPE (range 4)) &quot; &quot;(into-array Byte/TYPE (range 4))&quot; &quot;(map + [1 2 3] [4 5 6])&quot; &quot;(map + [1 2 3] [4 5 6 7])&quot; &quot;(map + [1 2 3 5]  [4 5 6])&quot;], :remote []}}</component>
</project>